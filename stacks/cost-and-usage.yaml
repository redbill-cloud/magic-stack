AWSTemplateFormatVersion: '2010-09-09'
Resources:
  CURBucket:
    Type: 'AWS::S3::Bucket'
    DeletionPolicy: Delete
    Properties:
      LifecycleConfiguration:
        Rules:
          - Id: Expire
            Status: Enabled
            ExpirationInDays: 60
      BucketName: !Sub 'magic-stack-cur-${AWS::AccountId}'
  AWSBillingPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref CURBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              AWS: '386209384616'
            Action:
              - s3:GetBucketAcl
              - s3:GetBucketPolicy
            Resource: !Sub 'arn:aws:s3:::magic-stack-cur-${AWS::AccountId}'
          - Effect: Allow
            Principal:
              AWS: '386209384616'
            Action: s3:PutObject
            Resource: !Sub 'arn:aws:s3:::magic-stack-cur-${AWS::AccountId}/*'
  CostReport:
    Type: AWS::CUR::ReportDefinition
    DependsOn:
      - AWSBillingPolicy
    Properties:
      ReportName: 'magic-cur'
      TimeUnit: HOURLY
      S3Prefix: magicstack
      Format: Parquet
      Compression: Parquet
      S3Bucket: !Ref CURBucket
      S3Region: us-east-1
      AdditionalSchemaElements:
        - RESOURCES
      AdditionalArtifacts:
        - ATHENA
      ReportVersioning: OVERWRITE_REPORT
      RefreshClosedReports: true
  MagicWorkGroup:
    Type: AWS::Athena::WorkGroup
    Properties:
      Name: 'MagicStackWorkGroup'
      RecursiveDeleteOption: true
      State: ENABLED
      WorkGroupConfiguration:
        PublishCloudWatchMetricsEnabled: false
        ResultConfiguration:
          OutputLocation: !Sub 's3://magic-stack-cur-${AWS::AccountId}/magicstack/query-results'
      Tags:
        - Key: 'magic-stack'
          Value: 'infra'

  CURDatabase:
    Type: 'AWS::Glue::Database'
    Properties:
      DatabaseInput:
        Name: 'magic_stack'
      CatalogId: !Ref AWS::AccountId
  CURCrawlerRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - glue.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/service-role/AWSGlueServiceRole'
      Policies:
        - PolicyName: CURCrawlerPermissions
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: !Sub 'arn:${AWS::Partition}:logs:*:*:*'
              - Effect: Allow
                Action:
                  - 'glue:UpdateDatabase'
                  - 'glue:UpdatePartition'
                  - 'glue:CreateTable'
                  - 'glue:UpdateTable'
                  - 'glue:ImportCatalogToGlue'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 's3:GetObject'
                  - 's3:PutObject'
                Resource: !Sub 'arn:aws:s3:::magic-stack-cur-${AWS::AccountId}/*'
  AWSCURCrawler:
    Type: 'AWS::Glue::Crawler'
    Properties:
      Name: 'MagicStackCrawler'
      Role: !GetAtt CURCrawlerRole.Arn
      DatabaseName: 'magic_stack'
      Configuration: "{\"Version\":1.0,\"CrawlerOutput\":{\"Tables\":{\"AddOrUpdateBehavior\":\"MergeNewColumns\"}}}"
      Targets:
        S3Targets:
          - Path: !Sub 's3://magic-stack-cur-${AWS::AccountId}/magicstack/magic-cur/magic-cur'
      SchemaChangePolicy:
        UpdateBehavior: UPDATE_IN_DATABASE
        DeleteBehavior: DELETE_FROM_DATABASE
      Tags:
        "magic-stack": "infra"
  CURStatus:
    Type: 'AWS::Glue::Table'
    DependsOn: CURDatabase
    Properties:
      DatabaseName: magic_stack
      CatalogId: !Ref AWS::AccountId
      TableInput:
        Name: 'cost_and_usage_data_status'
        TableType: 'EXTERNAL_TABLE'
        StorageDescriptor:
          Columns:
            - Name: status
              Type: 'string'
          InputFormat: 'org.apache.hadoop.hive.ql.io.parquet.MapredParquetInputFormat'
          OutputFormat: 'org.apache.hadoop.hive.ql.io.parquet.MapredParquetOutputFormat'
          SerdeInfo:
            SerializationLibrary: 'org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe'
          Location: !Sub 's3://magic-stack-cur-${AWS::AccountId}/magicstack/magic-cur/magic-cur/cost_and_usage_data_status/'
  RemoveDataStackDeleteRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: 'cleanupBucketOnDeleteLambdaPolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action: 's3:*'
                Effect: "Allow"
                Resource:
                  - !Sub 'arn:aws:s3:::magic-stack-cur-${AWS::AccountId}'
                  - !Sub 'arn:aws:s3:::magic-stack-cur-${AWS::AccountId}/*'
  RemoveBucketDataLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: 'MagicStackRemoveBucketData'
      Description: Delete objects, when user requests stack deletion
      Runtime: python3.8
      Code:
        ZipFile: |
          #!/usr/bin/env python3
          import boto3
          import cfnresponse
          def return_response_to_cf(event, context, status, reason):
            if event and event.get('ResponseURL'):
              cfnresponse.send(event, context, status, {}, reason=reason)
          def lambda_handler(event, context):
            try:
                bucket = event['ResourceProperties']['BucketName']

                if event['RequestType'] == 'Delete':
                    s3 = boto3.resource('s3')
                    bucket = s3.Bucket(bucket)
                    for obj in bucket.objects.filter():
                        s3.Object(bucket.name, obj.key).delete()

                return_response_to_cf(event, context, cfnresponse.SUCCESS, "All checks passed")
            except Exception as e:
                print(e)
                return_response_to_cf(event, context, cfnresponse.FAILED, str(e))
      Handler: 'index.lambda_handler'
      Timeout: 300
      Role: !GetAtt RemoveDataStackDeleteRole.Arn
  CleanupBucketOnDelete:
    Type: Custom::removeData
    Properties:
      ServiceToken: !GetAtt RemoveBucketDataLambda.Arn
      BucketName: !Sub 'arn:aws:s3:::magic-stack-cur-${AWS::AccountId}'
    DependsOn: CURBucket
